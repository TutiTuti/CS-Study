인덱스 : RDBMS에서는 B+Tree 구조로 된 Index를 사용하여 검색 속도를 향상, 특히 Select-where 쿼리처럼 특정 데이터를 찾을때 유용

인덱스 구조 : B+Tree(대부분), Hash, Bitmap, Btree로 구현

- BTree 및 B+Tree : [https://zorba91.tistory.com/293](https://zorba91.tistory.com/293)

인덱스를 생성하면 특정 컬럼(속성)의 값을 기준으로 정렬하여 데이터의 물리적 위치 주소와 함께 별도 파일에 저장

이때 특정 컬럼을 'search-key'라고 하고 실제 데이터의 물리적 위치 값을 'pointer'라 함.

보통 인덱스는 테이블 크기의 10% 정도의 저장 공간을 차지

결론적으로 인덱스를 사용하는 이유는 테이블의 데이터는 순서 없이 쌓이게 되므로 특정 조건의 데이터를 찾으려면 모든 데이터에 접근하여 비교하는 과정(Full Table Scan)이 필요한데, 인덱스가 있을 경우 Search-Key가 정렬되어 있기 때문에 조건 검색시 속도가 빠름 = 테이블 데이터를 빠르게 찾기 위함

인덱스의 장점

- 빠른 검색속도 향상

인덱스의 단점

- 추가 저장공간 (약 10%) 필요
- DML(Insert, Update, Delete) 등의 변동 사항이 있는 경우 성능이 저하됨 = 테이블 수정시 인덱스도 추가 수정되어 첫번째와 동일한 이유로 추가 비용 발생

따라서, join조건으로 자주 사용되는 컬럼이나 수정 빈도가 낮으며, 데이터 중복이 적은 컬럼을 선택

단, 한 테이블에 인덱스가 많거나, 성별과 같은 중복이 높은 값은 X
